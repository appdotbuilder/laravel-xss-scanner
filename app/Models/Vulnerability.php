<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

/**
 * App\Models\Vulnerability
 *
 * @property int $id
 * @property int $scan_id
 * @property string $url
 * @property string $type
 * @property string $severity
 * @property string|null $parameter
 * @property string $payload
 * @property string|null $evidence
 * @property string $method
 * @property array|null $request_data
 * @property string|null $description
 * @property bool $verified
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \App\Models\Scan $scan
 * 
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability query()
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereEvidence($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereMethod($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereParameter($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability wherePayload($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereRequestData($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereScanId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereSeverity($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereUrl($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability whereVerified($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability critical()
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability high()
 * @method static \Illuminate\Database\Eloquent\Builder|Vulnerability verified()
 * @method static \Database\Factories\VulnerabilityFactory factory($count = null, $state = [])
 * 
 * @mixin \Eloquent
 */
class Vulnerability extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'scan_id',
        'url',
        'type',
        'severity',
        'parameter',
        'payload',
        'evidence',
        'method',
        'request_data',
        'description',
        'verified',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'request_data' => 'array',
        'verified' => 'boolean',
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
    ];

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'vulnerabilities';

    /**
     * Get the scan that owns this vulnerability.
     */
    public function scan(): BelongsTo
    {
        return $this->belongsTo(Scan::class);
    }

    /**
     * Scope a query to only include critical vulnerabilities.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeCritical($query)
    {
        return $query->where('severity', 'critical');
    }

    /**
     * Scope a query to only include high severity vulnerabilities.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeHigh($query)
    {
        return $query->where('severity', 'high');
    }

    /**
     * Scope a query to only include verified vulnerabilities.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeVerified($query)
    {
        return $query->where('verified', true);
    }
}