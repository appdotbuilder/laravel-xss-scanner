<?php

namespace Database\Factories;

use App\Models\Scan;
use App\Models\Vulnerability;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Vulnerability>
 */
class VulnerabilityFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var class-string<\App\Models\Vulnerability>
     */
    protected $model = Vulnerability::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $payloads = [
            '<script>alert("XSS")</script>',
            '<img src=x onerror=alert("XSS")>',
            '<svg onload=alert("XSS")>',
            'javascript:alert("XSS")',
            '" onmouseover="alert(\'XSS\')" "',
        ];

        $parameters = [
            'q', 'search', 'query', 'name', 'message', 'comment',
            'url', 'redirect', 'id', 'user', 'email', 'title'
        ];

        $payload = fake()->randomElement($payloads);

        return [
            'scan_id' => Scan::factory(),
            'url' => fake()->url() . '?' . fake()->randomElement($parameters) . '=' . urlencode($payload),
            'type' => fake()->randomElement(['reflected_xss', 'stored_xss', 'dom_xss']),
            'severity' => fake()->randomElement(['low', 'medium', 'high', 'critical']),
            'parameter' => fake()->randomElement($parameters),
            'payload' => $payload,
            'evidence' => '...' . fake()->text(100) . $payload . fake()->text(50) . '...',
            'method' => fake()->randomElement(['GET', 'POST']),
            'request_data' => [
                'url' => fake()->url(),
                'payload' => $payload,
            ],
            'description' => fake()->sentence(),
            'verified' => fake()->boolean(30), // 30% chance of being verified
        ];
    }

    /**
     * Indicate that the vulnerability is critical.
     */
    public function critical(): static
    {
        return $this->state(fn (array $attributes) => [
            'severity' => 'critical',
        ]);
    }

    /**
     * Indicate that the vulnerability is verified.
     */
    public function verified(): static
    {
        return $this->state(fn (array $attributes) => [
            'verified' => true,
        ]);
    }

    /**
     * Indicate that the vulnerability is reflected XSS.
     */
    public function reflectedXss(): static
    {
        return $this->state(fn (array $attributes) => [
            'type' => 'reflected_xss',
        ]);
    }
}